(Inverse BWT written by Jan Ondrus, Oct. 15, 2009)
(block size apx. 256MB)

comp 4 0 24 28 7 (hh hm ph pm n ... ph needs to be pm-4)
  0 icm 5 (order 0)
  1 isse 13 0 (order 1)
  2 isse 19 1 (order 2)
  3 isse 20 2 (order 4)
  4 mix 9 0 4 8 255
  5 sse 8 4 8 255
  6 mix2 0 4 5 255 255
hcomp
  (b=last 4 bytes)
  b<>a a<<= 8 a+=b b=a
  d= 1 a<<= 24 a>>= 15 *d=a
  d++ *d=0 a=b a<<= 16 a>>= 16 hashd
  d++ *d=0 a=b hashd
  halt
pcomp bwt_ b268423152 ; (block size needs to be 2^pm-12304)
  a> 255 ifnot
    *c=a (save byte in M array)
    c++
    a=c a== 8 if
      a=r 3 a== 0 if
        c=0
        a=*c c++ a<<= 8 a+=*c c++ a<<= 8 a+=*c c++ a<<= 8 a+=*c c++ r=a 3 (save n in r3)
        a=*c c++ a<<= 8 a+=*c c++ a<<= 8 a+=*c c++ a<<= 8 a+=*c r=a 1 (save p in r1)
        c=0
      endif
    endif
  endif

  a=r 3 a== 0 ifnot a>c endif ifnotl (detect end of block)

    (count bytes)
    a= 255 a++ a+=a a++ c=a d=0 do *d=0 d++ a=d a<c while (clear array)


    (for |int i=0; i<n; ++i| h[block[i]+1]++;)
    c=0 a=r 3 do d=*c d++ *d++ c++ a>c while


    (for |int i=1; i<257; ++i| h[i]+=h[i-1];)
    d= 1 do d-- c=*d d++ a=*d a+=c *d=a a= 255 a++ a++ c=a d++ a=d a<c while


    (slow: build ptr[t[c]+c+i] = position of i*16'th occurrence of c in block)
    c=0
    do
      b=*c
      a=b a+= 255 a++ a++ d=a a=*d *d++ a&= 15
      a== 0 if
        a=*d a>>= 4 a+=b b<>a d=a a=*d a>>= 4 a+=b b=a
        a= 255 a++ a+=a a++ a+=b d=a *d=c
      endif
    c++ a=r 3 a>c while


    (decode)
    b=r 1 a=*b r=a 0
    a=0 r=a 4
    do
      a=r 0 out

      (find next c by binary search in t so that t[c] <= p < t[c+1])
      d= 127 b= 64
      do
        c=*d a=r 1 a<c if
          a=d a-=b d=a
        else
          d++ c=*d d-- a<c ifnot
            a=d a+=b d=a
          else
            b=0
          endif
        endif
        a=b a>>= 1 b=a
      a=b a> 0 while
      a= 254 a==d if
        d= 255 d=*d a=r 1 a<d d= 254 ifnot
          d= 255 d++ d=*d a<d d= 254 if
            d= 255
          endif
        endif
      endif
      a=d r=a 0

      (find approximate position of p)
      a=r 1 d=r 0 d=*d a-=d r=a 2
      d=r 0 a=*d a>>= 4 b=a a=r 2 a>>= 4 a+=b b=a a=r 0 a+=b b=a a= 255 a++ a+=a a++ a+=b d=a a=*d r=a 1
      a=r 2 a&= 15 r=a 2


      (find next p by linear search for offset'th occurrence of c in block)
      a=r 2 a> 0 if
        do
          a=r 1 a++ r=a 1
          b=r 1 a=*b b=r 0 a==b ifnot
            do
              a=r 1 a++ r=a 1
            b=r 1 a=*b b=r 0 a==b until
          endif
          a=r 2 a-- r=a 2
        a=r 2 a> 0 while
      endif


    b=r 3 a=r 4 a++ r=a 4 a<b while

    c=0 a=0 r=a 3
  endif
  halt
end
