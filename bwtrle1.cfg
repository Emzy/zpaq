(bwtrle1.cfg (C) 2011, Dell Inc. Written by Matt Mahoney.
Licensed under GPL v3, http://www.gnu.org/licenses/gpl.html )

(BWT + RLE + order 0 model.
Requires 640 MB memory for files up to 128 MB - 256 bytes.
Use argument 1 to double, -1 to halve)
comp 1 0 $1+27 $1+27 1
  0 icm 7
hcomp
  a==c c=a if
    b++
  else
    b=0
  endif
  a=b *d=0 hashd
  halt
pcomp c:\res\zpaq\bwtrle e ;

  (read BWT and index into M[0..b-1] with RLE decoding:
   X X n -> n+2 copies of X)
  a> 255 ifnot
    c=a (copy of input byte)
    a=d a== 0 if (d=0 = initial RLE state: write c and save c+1 in d)
      d=c d++
      *b=c b++
    else
      a=d a-- a> 255 ifnot (d=1..256 = last byte + 1)
        a==c if
          a+= 255 a++ a++ d=a (d=257..512 = RLE count is next)
        else
          d=c d++
        endif
        *b=c b++
      else (d=257..512 = write c repeats of d-257)
        d--
        do a=c a> 0 if
          *b=d b++ c--
        forever endif
        d=0 (reset RLE state)
      endif
    endif

  (inverse BWT)
  else

    (index in last 4 bytes, put in c and R1)
    b-- a=*b
    b-- a<<= 8 a+=*b
    b-- a<<= 8 a+=*b
    b-- a<<= 8 a+=*b c=a r=a 1

    (save size in R2)
    a=b r=a 2

    (count bytes in H[~1..~255, ~0])
    do
      a=b a> 0 if
        b-- a=*b a++ a&= 255 d=a d! *d++
      forever
    endif

    (cumulative counts: H[~i=0..255] = count of bytes before i)
    d=0 d! *d= 1 a=0
    do
      a+=*d *d=a d--
    d<>a a! a> 255 a! d<>a until

    (build first part of linked list in H[0..idx-1])
    b=0 do
      a=c a>b if
        d=*b d! *d++ d=*d d-- *d=b
      b++ forever
    endif

    (rest of list in H[idx+1..n-1])
    b=c b++ c=r 2 do
      a=c a>b if
        d=*b d! *d++ d=*d d-- *d=b
      b++ forever
    endif

    (traverse list and output)
    d=r 1 do
      a=d a== 0 ifnot
        d=*d
        b=d a=*b out
      forever
    endif
  endif
  halt
end

