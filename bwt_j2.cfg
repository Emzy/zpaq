(Inverse BWT written by Jan Ondrus, Oct. 6, 2009)
(Modified by Matt Mahoney to take block size parameter 0..18
to set block size to 2^($1 + 10) - 256 using 5 x 2^$1 KB memory)

comp 4 0 $1+10 $1+10 7
  0 icm 5 (order 0)
  1 isse 13 0 (order 1)
  2 isse 19 1 (order 2)
  3 isse 20 2 (order 4)
  4 mix 9 0 4 8 255
  5 sse 8 4 8 255
  6 mix2 0 4 5 255 255
hcomp
  (b=last 4 bytes)
  b<>a a<<= 8 a+=b b=a
  d= 1 a<<= 24 a>>= 15 *d=a
  d++ *d=0 a=b a<<= 16 a>>= 16 hashd
  d++ *d=0 a=b hashd
  halt
pcomp bwtpre $1 ;
  b=a  
  a> 255 ifnot
    *c=a (save byte in M array)
    a=c a== 7 if
      c= 0
      a=*c c++ a<<= 8 a+=*c c++ a<<= 8 a+=*c c++ a<<= 8 a+=*c c++ a+= 255 r=a 0 (save n+255 in r0)
      a=*c c++ a<<= 8 a+=*c c++ a<<= 8 a+=*c c++ a++ a<<= 8 a+=*c r=a 1 (save p+256 in r1)
      c= 255
    endif
    c++
  else (clear H at EOF for next file)
    a= $1+10 b=0 c=0 d=a
    do
      d-- *d=0
    a=b a> 0 while
  endif

  a=r 0 a> 0 if a<c endif if (detect end of block)

    (count bytes)
    d= 0 *d= 255 *d++ do d++ *d= 0 a=d a< 255 while (clear array)
    c= 255 a=r 0
    do
      c++ a>c
      d=*c d++ *d++
    while
    d= 0
    do
      c=*d d++ a=*d a+=c *d=a
      a=d a< 255
    while

    (fast mode: build linked list)
    c= 255 a=r 0
    do
      c++ a>c
      d=*c *d++ d=*d d-- *d=c (H[M[M[c]]++]=c)
    while

    (traverse list)
    d=r 1 (read p+256 from r1)
    c= 255
    do
      a=r 0
      c++ a>c
      b=d a=*b out (output M[p])
      d=*d (p=H[p])
    while

    c= 0
  endif
  halt
end
