(lazy2.cfg (C) 2012, Dell Inc. Licensed under GPL v3.

The following are equivalent:

  lazy2 d input output
  zpaq -method lazy2 -run pcomp input output

where the input was compressed with lazy2.exe. You can also compress
(actually store) using lazy2.exe as an external preprocessor to produce
an archive:

  zpaq -method lazy2 -add archive files...

See lazy2.cpp for an explanation of the format and equivalent code.)

comp 0 0 0 24 0 (for files up to 2^24 bytes - increase as needed)
hcomp
pcomp lazy2 3 ; (can be 1..5 for fastest..best compression)
 (r1 = state
  r2 = len - match or literal length
  r3 = m - number of offset bits expected
  r4 = ptr to buf
  c = bits - input buffer
  d = n - number of bits in c)

  (At EOF, do e8e9 transform of (e8|e9 xx xx xx 00|ff) and output)
  a> 255 if
    b=0 d=r 4 do (for b=0..d-1, d = end of buf)
      a=b a==d ifnot
        a+= 4 a<d if
          a=*b a&= 254 a== 232 if (e8 or e9?)
            c=b b++ b++ b++ b++ a=*b a++ a&= 254 a== 0 if (00 or ff)
              b-- a=*b
              b-- a<<= 8 a+=*b
              b-- a<<= 8 a+=*b
              a-=b a++
              *b=a a>>= 8 b++
              *b=a a>>= 8 b++
              *b=a b++
            endif
            b=c
          endif
        endif
        a=*b out b++
      forever
    endif

    (reset state)
    a=0 b=0 c=0 d=0 r=a 1 r=a 2 r=a 3 r=a 4
    halt
  endif

  a<<=d a+=c c=a               (bits+=a<<n)
  a= 8 a+=d d=a                (n+=8)

  (if state==0 (expect new code))
  a=r 1 a== 0 if (match code jj,kkk)
    a= 1 r=a 2                 (len=1)
    a=c a&= 3 a> 0 if          (if (bits&3))
      a-- a<<= 3 r=a 3           (m=((bits&3)-1)*8)
      a=c a>>= 2 c=a             (bits>>=2)
      b=r 3 a&= 7 a+=b r=a 3     (m+=bits&7)
      a=c a>>= 3 c=a             (bits>>=3)
      a=d a-= 5 d=a              (n-=5)
      a= 1 r=a 1                 (state=1)
    else (literal, discard 00)
      a=c a>>= 2 c=a             (bits>>=2)
      d-- d--                    (n-=2)
      a= 3 r=a 1                 (state=3)
    endif
  endif

  (while state==1 && n>=3 (expect match length u,nn))
  do a=r 1 a== 1 if a=d a> 2 if
    a=c a&= 1 a== 1 if         (if bits&1)
      a=c a>>= 1 c=a             (bits>>=1)
      b=r 2 a=c a&= 1 a+=b a+=b r=a 2 (len+=len+(bits&1))
      a=c a>>= 1 c=a             (bits>>=1)
      d-- d--                    (n-=2)
    else
      a=c a>>= 1 c=a             (bits>>=1)
      a=r 2 a<<= 2 b=a           (len<<=2)
      a=c a&= 3 a+=b r=a 2       (len+=bits&3)
      a=c a>>= 2 c=a             (bits>>=2)
      d-- d-- d--                (n-=3)
      a= 2 r=a 1                 (state=2)
    endif
  forever endif endif

  (if state==2 && n>=m) (expect m offset bits)
  a=r 1 a== 2 if a=r 3 a>d ifnot
    a=c r=a 6 a=d r=a 7          (save c=bits, d=n in r6,r7)
    b=r 3 a= 1 a<<=b d=a         (d=1<<m)
    a-- a&=c a+=d d=a            (d=offset=bits&((1<<m)-1)|(1<<m))
    b=r 4 a=b a-=d c=a           (c=p=(b=ptr)-offset)
    
    (while len-- (copy and output match))
    d=r 2 do a=d a> 0 if d--
      a=*c *b=a c++ b++          (buf[ptr++]-buf[p++])
    forever endif
    a=b r=a 4

    a=r 6 b=r 3 a>>=b c=a        (bits>>=m)
    a=r 7 a-=b d=a               (n-=m)
    a=0 r=a 1                    (state=0)
  endif endif

  (while state==3 && n>=2 (expect literal length))
  do a=r 1 a== 3 if a=d a> 1 if
    a=c a&= 1 a== 1 if         (if bits&1)
      a=c a>>= 1 c=a              (bits>>=1)
      b=r 2 a&= 1 a+=b a+=b r=a 2 (len+=len+(bits&1))
      a=c a>>= 1 c=a              (bits>>=1)
      d-- d--                     (n-=2)
    else
      a=c a>>= 1 c=a              (bits>>=1)
      d--                         (--n)
      a= 4 r=a 1                  (state=4)
    endif
  forever endif endif

  (if state==4 && n>=8 (expect len literals))
  a=r 1 a== 4 if a=d a> 7 if
    b=r 4 a=c *b=a b++ a=b r=a 4  (buf[ptr++]=bits)
    a=c a>>= 8 c=a               (bits>>=8)
    a=d a-= 8 d=a                (n-=8)
    a=r 2 a-- r=a 2 a== 0 if     (if --len<1)
      a=0 r=a 1                    (state=0)
    endif
  endif endif
  halt
end
       